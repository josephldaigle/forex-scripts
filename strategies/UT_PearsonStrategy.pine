//@version=5
strategy("Pearson R/UT Bot", shorttitle="PRUT Strategy", overlay=true)

import HeWhoMustNotBeNamed/Logger/1 as l
var logger = l.Logger.new(minimumLevel = 'DEBUG')
logger.init()

// debug var
var bool debug = true

group0 = "Trade Settings"
riskFactor = input.float(1.5, title = "Risk Factor", step=0.01, minval = 0.01, group = group0, tooltip = "Used to set take-profit and stop-loss levels.")

group1 = "Pearson R"
rThreshold = input.float(75.5, title="R Threshold", step=0.1, minval = 0.0, maxval = 100, group = group1, tooltip = "Min required value to execute trades.")
lengthInput = input.int(100, title="Length", minval = 1, maxval = 5000, group = group1)
sourceInput = input.source(close, title="Source", group = group1)
useUpperDevInput = input.bool(true, title="Upper Deviation", inline = "Upper Deviation", group = group1)
upperMultInput = input.float(2.0, title="", inline = "Upper Deviation", group = group1)
useLowerDevInput = input.bool(true, title="Lower Deviation", inline = "Lower Deviation", group = group1)
lowerMultInput = input.float(2.0, title="", inline = "Lower Deviation", group = group1)
showPearsonInput = input.bool(true, "Show Pearson's R", group = group1)
extendLeftInput = input.bool(false, "Extend Lines Left", group = group1)
extendRightInput = input.bool(false, "Extend Lines Right", group = group1)
extendStyle = switch
    extendLeftInput and extendRightInput => extend.both
    extendLeftInput => extend.left
    extendRightInput => extend.right
    => extend.none
colorUpper = input.color(color.new(color.blue, 85), "", inline = group1, group = group1)
colorLower = input.color(color.new(color.red, 85), "", inline = group1, group = group1)

calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]
        
[s, a, i] = calcSlope(sourceInput, lengthInput)

startPrice = i + s * (lengthInput - 1)
endPrice = i
var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na
    
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]
    
[stdDev, pearsonR, upDev, dnDev] = calcDev(sourceInput, lengthInput, s, a, i)
var rValue = pearsonR
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice = endPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
var line upper = na
lowerStartPrice = startPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
lowerEndPrice = endPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)
    na
if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)
    na
linefill.new(upper, baseLine, color = colorUpper)
linefill.new(baseLine, lower, color = colorLower)
    
// Pearson's R
var label r = na
label.delete(r[1])
if showPearsonInput and not na(pearsonR)
    r := label.new(bar_index - lengthInput + 1, lowerStartPrice, str.tostring(pearsonR, "#.################"), color = color.new(color.white, 100), textcolor=color.new(colorUpper, 0), size=size.normal, style=label.style_label_up)

src = close
group2 = 'UT Bot'
keyvalue = input.float(3, title="Key Value (sensitivty)", step=0.5, group = group2)
atrPeriod = input.int(10, title = "ATR Period", group = group2)
xATR = ta.atr(atrPeriod)
nLoss = keyvalue * xATR

xAtrTrailStop = 0.0
iff_1 = src > nz(xAtrTrailStop[1], 0) ? src - nLoss : src + nLoss
iff_2 = src < nz(xAtrTrailStop[1], 0) and src[1] < nz(xAtrTrailStop[1], 0) ? math.min(nz(xAtrTrailStop[1]), src + nLoss) : iff_1
xAtrTrailStop := src > nz(xAtrTrailStop[1], 0) and src[1] > nz(xAtrTrailStop[1], 0) ? math.max(nz(xAtrTrailStop[1]), src - nLoss) : iff_2

pos = 0
iff_3 = src[1] > nz(xAtrTrailStop[1], 0) and src < nz(xAtrTrailStop[1], 0) ? -1 : nz(pos[1], 0)
pos := src[1] < nz(xAtrTrailStop[1], 0) and src > nz(xAtrTrailStop[1], 0) ? 1 : iff_3

xcolor = pos == -1 ? color.red : pos == 1 ? color.green : color.blue

plot(xAtrTrailStop, color=xcolor, title='Trailing Stop')

rThresholdMet = (pearsonR >= rThreshold/100) ? 1 : 0
buy = ta.crossover(src, xAtrTrailStop)
sell = ta.crossunder(src, xAtrTrailStop)

barcolor = src > xAtrTrailStop

plotshape(buy and rThresholdMet, title='Buy', text='Buy', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(sell and rThresholdMet, title='Sell', text='Sell', style=shape.labeldown, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)

plotshape(debug ? rThresholdMet : na, title='rThresholdMet', text=' ', color=color.new(color.orange, 100), textcolor=color.new(color.white, 0))
plotshape(debug ? rValue : na, title='rValue', text=' ', color=color.new(color.maroon, 0), textcolor=color.new(color.white, 0))

float sl = na
float tp = na

if (buy)
    tp := close + ((close - xAtrTrailStop) * riskFactor)
else if (sell)
    tp := close - ((xAtrTrailStop - close) * riskFactor)

// debug
plotchar(debug and (buy or sell) ? xAtrTrailStop : na, title="stop-loss", color=color.white)
plotchar(debug and (buy or sell) ? tp : na, title="take-profit", color=color.white)


if (buy and rThresholdMet)
    strategy.entry("long_entry", strategy.long)

if (sell and rThresholdMet)
    strategy.entry("short_entry", strategy.short)

strategy.exit("long_exit_stop", "long_entry", stop = xAtrTrailStop)
strategy.exit("long_exit_tp", "long_entry", limit = tp)

strategy.exit("short_exit_stop", "short_entry", stop = xAtrTrailStop)
strategy.exit("short_exit_tp", "short_entry", limit = tp)